{
  "compilerOptions": {
    "outDir": "./dist/",
    "noImplicitAny": true,
    "module": "es6",
    "target": "es5",
    "jsx": "react",
    "allowJs": true,
    "moduleResolution": "node",
    "sourceMap": true,
    "baseUrl": "./",
    "paths": {
      //别名在webpcak.config.js中也要设置 http://www.gaofeiyu.com/blog/893.html  https://segmentfault.com/a/1190000022665283
      "@component/*": ["src/component/*"]  
    }
  },
  "include": ["src/**/*", "types/image.d.ts", ],
  "exclude": [
        "dist"
    ]
}

// *** target ****
// 当我们使用 TypeScript 编写代码时，我们可以使用 ES6/ES2015 的语法特性，如箭头函数、解构赋值等等，这些特性在低版本的浏览器中可能并不支持。因此，TypeScript 提供了 target 选项，允许我们将 TypeScript 编译成符合不同 ECMAScript 版本的 JavaScript 代码。
// 例如，如果我们将 target 设置为 es5，则 TypeScript 编译器会将 ES6/ES2015 的语法转换为对应的 ES5 语法。这样，我们就可以在不支持 ES6 的浏览器上运行 TypeScript 编写的代码。
// 除了 es5，我们还可以将 target 设置为 es6、es2017 等不同的值，以便生成更高版本的 JavaScript 代码。
// 总之，target 选项是用来指定 TypeScript 编译器将 TypeScript 代码编译成符合哪个 ECMAScript 版本的 JavaScript 代码，从而使 TypeScript 编写的代码可以在多种浏览器和环境中运行。

// *** module ****
//module 选项用于指定编译模块代码时所采用的模块规范（或称为模块系统）。具体来说，它决定了如何将多个 TypeScript 模块组合成一个 JavaScript 文件
//其实就是你的模块所依赖的标准，如果是es6,那么你的模块编写代码就是用import export，如果是commonjs，就是用module.exports require